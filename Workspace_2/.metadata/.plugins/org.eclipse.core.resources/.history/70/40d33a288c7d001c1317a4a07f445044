/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>


void task1_handler(void);	//task 1
void task2_handler(void);	//task 2
void task3_handler(void);	//task 3
void task4_handler(void);	//task 4

void init_systick_timer(uint32_t tick_hz);

/* Stack memory calculation
 * defining boundaries
 * */
#define SIZE_TASK_STACK		1024U
#define	SIZE_SCHED_STACK	1024U

#define SRAM_START			0X20000000U
#define	SIZE_SRAM			(	(128) * (1024)	)
#define	END_SRAM			( (SRAM_START) + (SIZE_SRAM) )

#define T1_STACK_START		SRAM_END
#define T2_STACK_START		(	(SRAM_END) - (1) * (SIZE_TASK_STACK)	)
#define T3_STACK_START		(	(SRAM_END) - (2) * (SIZE_TASK_STACK)	)
#define T4_STACK_START		(	(SRAM_END) - (3) * (SIZE_TASK_STACK)	)
#define SCHED_STACK_START	(	(SRAM_END) - (4) * (SIZE_TASK_STACK)	)

#define TICK_HZ				1000U

#define HSI_CLOCK			16000000U
#define SYSTICK_TIM_CLK		HSI_CLOCK

int main(void)
{
	//Setting up Systick Timer
	init_systick_timer(TICK_HZ);

    /* Loop forever */
	for(;;);
}


void task1_handler(void)
{
	while(1)
	{
		printf("This is task1\n");
	}

}

void task2_handler(void)
{
	while(1)
	{
		printf("This is task2\n");
	}

}

void task3_handler(void)
{
	while(1)
	{
		printf("This is task3\n");
	}

}

void task4_handler(void)
{
	while(1)
	{
		printf("This is task3\n");
	}

}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
	uint32_t *pSCSR = (uint32_t*)0xE000E010;

	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz)-1;

	//Clear the value of SVR
	*pSRVR &= ~ (0x00FFFFFFFF);

	//load the value in to SVR
	*pSRVR |=   count_value;

	//do some settings
	*pSCRS |=   ( 1 << 1 );			//Enables SysTick exception request
	*pSCRS |=   ( 1 << 2 );			//Indicates the clock source, processor clock source

	//enable the systick
	*pSCRS |=   ( 1 << 0 );			//Enables the counter

}


void SysTick_Handler(void)
{

}
