/**
  ******************************************************************************
  * @file    main.c
  * @author  Auto-generated by STM32CubeIDE
  * @version V1.0
  * @brief   Default main function.
  ******************************************************************************
*/

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

/*
Write a program to execute an SVC instruction from thread mode,
implement the svc handler to print the SVC number used.
Also,  increment the SVC number by 4 and return it to the thread mode code and print it.
Hints :
1)Write a main() function where you should execute the SVC instruction with an argument.
let's say SVC #0x5
2)Implement the SVC handler
3)In the SVC handler extract the SVC number and print it using printf
4) Increment the SVC number by 4 and return it to the thread mode
*/

#include<stdio.h>
#include<stdint.h>

void SVC_Handler_c(uint32_t *pBaseOfStackFrame);

int32_t add_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #36");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;


}

int32_t sub_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #37");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;

}


int32_t mul_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #38");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;

}


int32_t div_numbers(int32_t x, int32_t y)
{
	int32_t res;
	__asm volatile("SVC #39");
	__asm volatile ("MOV %0,R0": "=r"(res) ::);
	return res;

}





int main(void)
{
	int32_t res;			//result for any operand

	res = add_numbers(40, -90);
	printf("Add result = %ld\n", res);

	res = sub_numbers(40, -90);
	printf("Add result = %ld\n", res);

	res = mul_numbers(40, -90);
	printf("Add result = %ld\n", res);

	res = div_numbers(40, -90);
	printf("Add result = %ld\n", res);




	for(;;);
}


__attribute__ ((naked)) void SVC_Handler(void)
{
	//1 . get the value of the MSP
	__asm("MRS R0,MSP");
	__asm("B SVC_Handler_c");
}

void SVC_Handler_c(uint32_t *pBaseOfStackFrame)
{
	printf("in SVC handler\n");

	int32_t	arg0, arg1, res;

	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];

	//2. decrement the return address by 2 to point to
	//opcode of the SVC instruction in the program memory
	pReturn_addr-=2;


	//3. extract the SVC number (LSByte of the opcode)
    uint8_t svc_number = *pReturn_addr;

    printf("Svc number is : %d\n",svc_number);

    arg0 = pBaseOfStackFrame[0];
    arg1 = pBaseOfStackFrame[1];

    switch(svc_number)
    {
    case 36:
    	res = arg0 + arg1;
    	break;
    case 37:
        res = arg0 - arg1;
        break;
    case 38:
        res = arg0 * arg1;
        break;
    case 39:
        res = arg0 / arg1;
        break;
    default:
    	printf("invalid svc code\n");


    }

    pBaseOfStackFrame[0] = res;


}
