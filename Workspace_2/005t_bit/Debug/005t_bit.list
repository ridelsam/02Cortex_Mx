
005t_bit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c74  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08000e1c  08000e1c  00010e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ee0  08000ee0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08000ee0  08000ee0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ee0  08000ee0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ee0  08000ee0  00010ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ee4  08000ee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08000ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000038  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   000023a9  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000063b  00000000  00000000  0002243d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00022a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000f0  00000000  00000000  00022ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002ab9  00000000  00000000  00022c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001343  00000000  00000000  00025749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009717  00000000  00000000  00026a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000301a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a3c  00000000  00000000  000301f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000e04 	.word	0x08000e04

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08000e04 	.word	0x08000e04

080001e8 <generate_interrupt>:
#include<stdio.h>
#include<stdint.h>

/* This function executes in THREAD MODE + PRIV ACCESS LEVEL of the processor */
void generate_interrupt()
{
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
	uint32_t *pSTIR  = (uint32_t*)0xE000EF00;
 80001ee:	4b09      	ldr	r3, [pc, #36]	; (8000214 <generate_interrupt+0x2c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pISER0 = (uint32_t*)0xE000E100;
 80001f2:	4b09      	ldr	r3, [pc, #36]	; (8000218 <generate_interrupt+0x30>)
 80001f4:	603b      	str	r3, [r7, #0]

	//enable IRQ3 interrupt
	*pISER0 |= ( 1 << 3);
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	683b      	ldr	r3, [r7, #0]
 8000200:	601a      	str	r2, [r3, #0]

	//generate an interrupt from software for IRQ3
	*pSTIR = (3 & 0x1FF);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2203      	movs	r2, #3
 8000206:	601a      	str	r2, [r3, #0]

}
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000212:	4770      	bx	lr
 8000214:	e000ef00 	.word	0xe000ef00
 8000218:	e000e100 	.word	0xe000e100

0800021c <change_acccess_level_unpriv>:


void change_acccess_level_unpriv(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	//read
	__asm volatile ("MRS R0, CONTROL");
 8000220:	f3ef 8014 	mrs	r0, CONTROL
	//modify
	__asm volatile ("ORR R0, R0, #0x01");
 8000224:	f040 0001 	orr.w	r0, r0, #1
	//store
	__asm volatile ("MSR CONTROL, R0");
 8000228:	f380 8814 	msr	CONTROL, r0


}
 800022c:	bf00      	nop
 800022e:	46bd      	mov	sp, r7
 8000230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000234:	4770      	bx	lr
	...

08000238 <main>:



/* This function executes in THREAD MODE of the processor */
int main(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
	printf("In thread mode : before interrupt\n");
 800023e:	4807      	ldr	r0, [pc, #28]	; (800025c <main+0x24>)
 8000240:	f000 f988 	bl	8000554 <puts>

	void(*fun_ptr)(void);
	fun_ptr = (void*)0x080001e8;
 8000244:	4b06      	ldr	r3, [pc, #24]	; (8000260 <main+0x28>)
 8000246:	607b      	str	r3, [r7, #4]

	fun_ptr();
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4798      	blx	r3

	change_acccess_level_unpriv();
 800024c:	f7ff ffe6 	bl	800021c <change_acccess_level_unpriv>

	generate_interrupt();
 8000250:	f7ff ffca 	bl	80001e8 <generate_interrupt>

	printf("In thread mode : after interrupt\n");
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <main+0x2c>)
 8000256:	f000 f97d 	bl	8000554 <puts>

	for(;;);
 800025a:	e7fe      	b.n	800025a <main+0x22>
 800025c:	08000e1c 	.word	0x08000e1c
 8000260:	080001e8 	.word	0x080001e8
 8000264:	08000e40 	.word	0x08000e40

08000268 <RTC_WKUP_IRQHandler>:
}

/* This function(ISR) executes in HANDLER MODE of the processor */
void RTC_WKUP_IRQHandler(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
	printf("In handler mode : ISR\n");
 800026c:	4801      	ldr	r0, [pc, #4]	; (8000274 <RTC_WKUP_IRQHandler+0xc>)
 800026e:	f000 f971 	bl	8000554 <puts>
	while(1);
 8000272:	e7fe      	b.n	8000272 <RTC_WKUP_IRQHandler+0xa>
 8000274:	08000e64 	.word	0x08000e64

08000278 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b086      	sub	sp, #24
 800027c:	af00      	add	r7, sp, #0
 800027e:	60f8      	str	r0, [r7, #12]
 8000280:	60b9      	str	r1, [r7, #8]
 8000282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000284:	2300      	movs	r3, #0
 8000286:	617b      	str	r3, [r7, #20]
 8000288:	e00a      	b.n	80002a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800028a:	f3af 8000 	nop.w
 800028e:	4601      	mov	r1, r0
 8000290:	68bb      	ldr	r3, [r7, #8]
 8000292:	1c5a      	adds	r2, r3, #1
 8000294:	60ba      	str	r2, [r7, #8]
 8000296:	b2ca      	uxtb	r2, r1
 8000298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800029a:	697b      	ldr	r3, [r7, #20]
 800029c:	3301      	adds	r3, #1
 800029e:	617b      	str	r3, [r7, #20]
 80002a0:	697a      	ldr	r2, [r7, #20]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	dbf0      	blt.n	800028a <_read+0x12>
	}

return len;
 80002a8:	687b      	ldr	r3, [r7, #4]
}
 80002aa:	4618      	mov	r0, r3
 80002ac:	3718      	adds	r7, #24
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	b086      	sub	sp, #24
 80002b6:	af00      	add	r7, sp, #0
 80002b8:	60f8      	str	r0, [r7, #12]
 80002ba:	60b9      	str	r1, [r7, #8]
 80002bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
 80002c2:	e009      	b.n	80002d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	1c5a      	adds	r2, r3, #1
 80002c8:	60ba      	str	r2, [r7, #8]
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4618      	mov	r0, r3
 80002ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d2:	697b      	ldr	r3, [r7, #20]
 80002d4:	3301      	adds	r3, #1
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	697a      	ldr	r2, [r7, #20]
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	429a      	cmp	r2, r3
 80002de:	dbf1      	blt.n	80002c4 <_write+0x12>
	}
	return len;
 80002e0:	687b      	ldr	r3, [r7, #4]
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3718      	adds	r7, #24
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}

080002ea <_close>:

int _close(int file)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
	return -1;
 80002f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000302:	b480      	push	{r7}
 8000304:	b083      	sub	sp, #12
 8000306:	af00      	add	r7, sp, #0
 8000308:	6078      	str	r0, [r7, #4]
 800030a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000312:	605a      	str	r2, [r3, #4]
	return 0;
 8000314:	2300      	movs	r3, #0
}
 8000316:	4618      	mov	r0, r3
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <_isatty>:

int _isatty(int file)
{
 8000322:	b480      	push	{r7}
 8000324:	b083      	sub	sp, #12
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
	return 1;
 800032a:	2301      	movs	r3, #1
}
 800032c:	4618      	mov	r0, r3
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000338:	b480      	push	{r7}
 800033a:	b085      	sub	sp, #20
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	return 0;
 8000344:	2300      	movs	r3, #0
}
 8000346:	4618      	mov	r0, r3
 8000348:	3714      	adds	r7, #20
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
	...

08000354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <_sbrk+0x5c>)
 800035e:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <_sbrk+0x60>)
 8000360:	1ad3      	subs	r3, r2, r3
 8000362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000368:	4b13      	ldr	r3, [pc, #76]	; (80003b8 <_sbrk+0x64>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d102      	bne.n	8000376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000370:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <_sbrk+0x64>)
 8000372:	4a12      	ldr	r2, [pc, #72]	; (80003bc <_sbrk+0x68>)
 8000374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000376:	4b10      	ldr	r3, [pc, #64]	; (80003b8 <_sbrk+0x64>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4413      	add	r3, r2
 800037e:	693a      	ldr	r2, [r7, #16]
 8000380:	429a      	cmp	r2, r3
 8000382:	d207      	bcs.n	8000394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000384:	f000 f846 	bl	8000414 <__errno>
 8000388:	4603      	mov	r3, r0
 800038a:	220c      	movs	r2, #12
 800038c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
 8000392:	e009      	b.n	80003a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000394:	4b08      	ldr	r3, [pc, #32]	; (80003b8 <_sbrk+0x64>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800039a:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <_sbrk+0x64>)
 800039c:	681a      	ldr	r2, [r3, #0]
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	4a05      	ldr	r2, [pc, #20]	; (80003b8 <_sbrk+0x64>)
 80003a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003a6:	68fb      	ldr	r3, [r7, #12]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3718      	adds	r7, #24
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20020000 	.word	0x20020000
 80003b4:	00000400 	.word	0x00000400
 80003b8:	20000080 	.word	0x20000080
 80003bc:	200000a0 	.word	0x200000a0

080003c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003c8:	480c      	ldr	r0, [pc, #48]	; (80003fc <LoopForever+0x6>)
  ldr r1, =_edata
 80003ca:	490d      	ldr	r1, [pc, #52]	; (8000400 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003cc:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <LoopForever+0xe>)
  movs r3, #0
 80003ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003d0:	e002      	b.n	80003d8 <LoopCopyDataInit>

080003d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d6:	3304      	adds	r3, #4

080003d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003dc:	d3f9      	bcc.n	80003d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <LoopForever+0x16>)
  movs r3, #0
 80003e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e4:	e001      	b.n	80003ea <LoopFillZerobss>

080003e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e8:	3204      	adds	r2, #4

080003ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003ec:	d3fb      	bcc.n	80003e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ee:	f000 f817 	bl	8000420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003f2:	f7ff ff21 	bl	8000238 <main>

080003f6 <LoopForever>:

LoopForever:
    b LoopForever
 80003f6:	e7fe      	b.n	80003f6 <LoopForever>
  ldr   r0, =_estack
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000404:	08000ee8 	.word	0x08000ee8
  ldr r2, =_sbss
 8000408:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800040c:	2000009c 	.word	0x2000009c

08000410 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <__errno>:
 8000414:	4b01      	ldr	r3, [pc, #4]	; (800041c <__errno+0x8>)
 8000416:	6818      	ldr	r0, [r3, #0]
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	20000000 	.word	0x20000000

08000420 <__libc_init_array>:
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	4d0d      	ldr	r5, [pc, #52]	; (8000458 <__libc_init_array+0x38>)
 8000424:	4c0d      	ldr	r4, [pc, #52]	; (800045c <__libc_init_array+0x3c>)
 8000426:	1b64      	subs	r4, r4, r5
 8000428:	10a4      	asrs	r4, r4, #2
 800042a:	2600      	movs	r6, #0
 800042c:	42a6      	cmp	r6, r4
 800042e:	d109      	bne.n	8000444 <__libc_init_array+0x24>
 8000430:	4d0b      	ldr	r5, [pc, #44]	; (8000460 <__libc_init_array+0x40>)
 8000432:	4c0c      	ldr	r4, [pc, #48]	; (8000464 <__libc_init_array+0x44>)
 8000434:	f000 fce6 	bl	8000e04 <_init>
 8000438:	1b64      	subs	r4, r4, r5
 800043a:	10a4      	asrs	r4, r4, #2
 800043c:	2600      	movs	r6, #0
 800043e:	42a6      	cmp	r6, r4
 8000440:	d105      	bne.n	800044e <__libc_init_array+0x2e>
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f855 3b04 	ldr.w	r3, [r5], #4
 8000448:	4798      	blx	r3
 800044a:	3601      	adds	r6, #1
 800044c:	e7ee      	b.n	800042c <__libc_init_array+0xc>
 800044e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000452:	4798      	blx	r3
 8000454:	3601      	adds	r6, #1
 8000456:	e7f2      	b.n	800043e <__libc_init_array+0x1e>
 8000458:	08000ee0 	.word	0x08000ee0
 800045c:	08000ee0 	.word	0x08000ee0
 8000460:	08000ee0 	.word	0x08000ee0
 8000464:	08000ee4 	.word	0x08000ee4

08000468 <memset>:
 8000468:	4402      	add	r2, r0
 800046a:	4603      	mov	r3, r0
 800046c:	4293      	cmp	r3, r2
 800046e:	d100      	bne.n	8000472 <memset+0xa>
 8000470:	4770      	bx	lr
 8000472:	f803 1b01 	strb.w	r1, [r3], #1
 8000476:	e7f9      	b.n	800046c <memset+0x4>

08000478 <_puts_r>:
 8000478:	b570      	push	{r4, r5, r6, lr}
 800047a:	460e      	mov	r6, r1
 800047c:	4605      	mov	r5, r0
 800047e:	b118      	cbz	r0, 8000488 <_puts_r+0x10>
 8000480:	6983      	ldr	r3, [r0, #24]
 8000482:	b90b      	cbnz	r3, 8000488 <_puts_r+0x10>
 8000484:	f000 fa48 	bl	8000918 <__sinit>
 8000488:	69ab      	ldr	r3, [r5, #24]
 800048a:	68ac      	ldr	r4, [r5, #8]
 800048c:	b913      	cbnz	r3, 8000494 <_puts_r+0x1c>
 800048e:	4628      	mov	r0, r5
 8000490:	f000 fa42 	bl	8000918 <__sinit>
 8000494:	4b2c      	ldr	r3, [pc, #176]	; (8000548 <_puts_r+0xd0>)
 8000496:	429c      	cmp	r4, r3
 8000498:	d120      	bne.n	80004dc <_puts_r+0x64>
 800049a:	686c      	ldr	r4, [r5, #4]
 800049c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800049e:	07db      	lsls	r3, r3, #31
 80004a0:	d405      	bmi.n	80004ae <_puts_r+0x36>
 80004a2:	89a3      	ldrh	r3, [r4, #12]
 80004a4:	0598      	lsls	r0, r3, #22
 80004a6:	d402      	bmi.n	80004ae <_puts_r+0x36>
 80004a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80004aa:	f000 fad3 	bl	8000a54 <__retarget_lock_acquire_recursive>
 80004ae:	89a3      	ldrh	r3, [r4, #12]
 80004b0:	0719      	lsls	r1, r3, #28
 80004b2:	d51d      	bpl.n	80004f0 <_puts_r+0x78>
 80004b4:	6923      	ldr	r3, [r4, #16]
 80004b6:	b1db      	cbz	r3, 80004f0 <_puts_r+0x78>
 80004b8:	3e01      	subs	r6, #1
 80004ba:	68a3      	ldr	r3, [r4, #8]
 80004bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80004c0:	3b01      	subs	r3, #1
 80004c2:	60a3      	str	r3, [r4, #8]
 80004c4:	bb39      	cbnz	r1, 8000516 <_puts_r+0x9e>
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	da38      	bge.n	800053c <_puts_r+0xc4>
 80004ca:	4622      	mov	r2, r4
 80004cc:	210a      	movs	r1, #10
 80004ce:	4628      	mov	r0, r5
 80004d0:	f000 f848 	bl	8000564 <__swbuf_r>
 80004d4:	3001      	adds	r0, #1
 80004d6:	d011      	beq.n	80004fc <_puts_r+0x84>
 80004d8:	250a      	movs	r5, #10
 80004da:	e011      	b.n	8000500 <_puts_r+0x88>
 80004dc:	4b1b      	ldr	r3, [pc, #108]	; (800054c <_puts_r+0xd4>)
 80004de:	429c      	cmp	r4, r3
 80004e0:	d101      	bne.n	80004e6 <_puts_r+0x6e>
 80004e2:	68ac      	ldr	r4, [r5, #8]
 80004e4:	e7da      	b.n	800049c <_puts_r+0x24>
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <_puts_r+0xd8>)
 80004e8:	429c      	cmp	r4, r3
 80004ea:	bf08      	it	eq
 80004ec:	68ec      	ldreq	r4, [r5, #12]
 80004ee:	e7d5      	b.n	800049c <_puts_r+0x24>
 80004f0:	4621      	mov	r1, r4
 80004f2:	4628      	mov	r0, r5
 80004f4:	f000 f888 	bl	8000608 <__swsetup_r>
 80004f8:	2800      	cmp	r0, #0
 80004fa:	d0dd      	beq.n	80004b8 <_puts_r+0x40>
 80004fc:	f04f 35ff 	mov.w	r5, #4294967295
 8000500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000502:	07da      	lsls	r2, r3, #31
 8000504:	d405      	bmi.n	8000512 <_puts_r+0x9a>
 8000506:	89a3      	ldrh	r3, [r4, #12]
 8000508:	059b      	lsls	r3, r3, #22
 800050a:	d402      	bmi.n	8000512 <_puts_r+0x9a>
 800050c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800050e:	f000 faa2 	bl	8000a56 <__retarget_lock_release_recursive>
 8000512:	4628      	mov	r0, r5
 8000514:	bd70      	pop	{r4, r5, r6, pc}
 8000516:	2b00      	cmp	r3, #0
 8000518:	da04      	bge.n	8000524 <_puts_r+0xac>
 800051a:	69a2      	ldr	r2, [r4, #24]
 800051c:	429a      	cmp	r2, r3
 800051e:	dc06      	bgt.n	800052e <_puts_r+0xb6>
 8000520:	290a      	cmp	r1, #10
 8000522:	d004      	beq.n	800052e <_puts_r+0xb6>
 8000524:	6823      	ldr	r3, [r4, #0]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	6022      	str	r2, [r4, #0]
 800052a:	7019      	strb	r1, [r3, #0]
 800052c:	e7c5      	b.n	80004ba <_puts_r+0x42>
 800052e:	4622      	mov	r2, r4
 8000530:	4628      	mov	r0, r5
 8000532:	f000 f817 	bl	8000564 <__swbuf_r>
 8000536:	3001      	adds	r0, #1
 8000538:	d1bf      	bne.n	80004ba <_puts_r+0x42>
 800053a:	e7df      	b.n	80004fc <_puts_r+0x84>
 800053c:	6823      	ldr	r3, [r4, #0]
 800053e:	250a      	movs	r5, #10
 8000540:	1c5a      	adds	r2, r3, #1
 8000542:	6022      	str	r2, [r4, #0]
 8000544:	701d      	strb	r5, [r3, #0]
 8000546:	e7db      	b.n	8000500 <_puts_r+0x88>
 8000548:	08000ea0 	.word	0x08000ea0
 800054c:	08000ec0 	.word	0x08000ec0
 8000550:	08000e80 	.word	0x08000e80

08000554 <puts>:
 8000554:	4b02      	ldr	r3, [pc, #8]	; (8000560 <puts+0xc>)
 8000556:	4601      	mov	r1, r0
 8000558:	6818      	ldr	r0, [r3, #0]
 800055a:	f7ff bf8d 	b.w	8000478 <_puts_r>
 800055e:	bf00      	nop
 8000560:	20000000 	.word	0x20000000

08000564 <__swbuf_r>:
 8000564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000566:	460e      	mov	r6, r1
 8000568:	4614      	mov	r4, r2
 800056a:	4605      	mov	r5, r0
 800056c:	b118      	cbz	r0, 8000576 <__swbuf_r+0x12>
 800056e:	6983      	ldr	r3, [r0, #24]
 8000570:	b90b      	cbnz	r3, 8000576 <__swbuf_r+0x12>
 8000572:	f000 f9d1 	bl	8000918 <__sinit>
 8000576:	4b21      	ldr	r3, [pc, #132]	; (80005fc <__swbuf_r+0x98>)
 8000578:	429c      	cmp	r4, r3
 800057a:	d12b      	bne.n	80005d4 <__swbuf_r+0x70>
 800057c:	686c      	ldr	r4, [r5, #4]
 800057e:	69a3      	ldr	r3, [r4, #24]
 8000580:	60a3      	str	r3, [r4, #8]
 8000582:	89a3      	ldrh	r3, [r4, #12]
 8000584:	071a      	lsls	r2, r3, #28
 8000586:	d52f      	bpl.n	80005e8 <__swbuf_r+0x84>
 8000588:	6923      	ldr	r3, [r4, #16]
 800058a:	b36b      	cbz	r3, 80005e8 <__swbuf_r+0x84>
 800058c:	6923      	ldr	r3, [r4, #16]
 800058e:	6820      	ldr	r0, [r4, #0]
 8000590:	1ac0      	subs	r0, r0, r3
 8000592:	6963      	ldr	r3, [r4, #20]
 8000594:	b2f6      	uxtb	r6, r6
 8000596:	4283      	cmp	r3, r0
 8000598:	4637      	mov	r7, r6
 800059a:	dc04      	bgt.n	80005a6 <__swbuf_r+0x42>
 800059c:	4621      	mov	r1, r4
 800059e:	4628      	mov	r0, r5
 80005a0:	f000 f926 	bl	80007f0 <_fflush_r>
 80005a4:	bb30      	cbnz	r0, 80005f4 <__swbuf_r+0x90>
 80005a6:	68a3      	ldr	r3, [r4, #8]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	60a3      	str	r3, [r4, #8]
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	1c5a      	adds	r2, r3, #1
 80005b0:	6022      	str	r2, [r4, #0]
 80005b2:	701e      	strb	r6, [r3, #0]
 80005b4:	6963      	ldr	r3, [r4, #20]
 80005b6:	3001      	adds	r0, #1
 80005b8:	4283      	cmp	r3, r0
 80005ba:	d004      	beq.n	80005c6 <__swbuf_r+0x62>
 80005bc:	89a3      	ldrh	r3, [r4, #12]
 80005be:	07db      	lsls	r3, r3, #31
 80005c0:	d506      	bpl.n	80005d0 <__swbuf_r+0x6c>
 80005c2:	2e0a      	cmp	r6, #10
 80005c4:	d104      	bne.n	80005d0 <__swbuf_r+0x6c>
 80005c6:	4621      	mov	r1, r4
 80005c8:	4628      	mov	r0, r5
 80005ca:	f000 f911 	bl	80007f0 <_fflush_r>
 80005ce:	b988      	cbnz	r0, 80005f4 <__swbuf_r+0x90>
 80005d0:	4638      	mov	r0, r7
 80005d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <__swbuf_r+0x9c>)
 80005d6:	429c      	cmp	r4, r3
 80005d8:	d101      	bne.n	80005de <__swbuf_r+0x7a>
 80005da:	68ac      	ldr	r4, [r5, #8]
 80005dc:	e7cf      	b.n	800057e <__swbuf_r+0x1a>
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <__swbuf_r+0xa0>)
 80005e0:	429c      	cmp	r4, r3
 80005e2:	bf08      	it	eq
 80005e4:	68ec      	ldreq	r4, [r5, #12]
 80005e6:	e7ca      	b.n	800057e <__swbuf_r+0x1a>
 80005e8:	4621      	mov	r1, r4
 80005ea:	4628      	mov	r0, r5
 80005ec:	f000 f80c 	bl	8000608 <__swsetup_r>
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d0cb      	beq.n	800058c <__swbuf_r+0x28>
 80005f4:	f04f 37ff 	mov.w	r7, #4294967295
 80005f8:	e7ea      	b.n	80005d0 <__swbuf_r+0x6c>
 80005fa:	bf00      	nop
 80005fc:	08000ea0 	.word	0x08000ea0
 8000600:	08000ec0 	.word	0x08000ec0
 8000604:	08000e80 	.word	0x08000e80

08000608 <__swsetup_r>:
 8000608:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <__swsetup_r+0xcc>)
 800060a:	b570      	push	{r4, r5, r6, lr}
 800060c:	681d      	ldr	r5, [r3, #0]
 800060e:	4606      	mov	r6, r0
 8000610:	460c      	mov	r4, r1
 8000612:	b125      	cbz	r5, 800061e <__swsetup_r+0x16>
 8000614:	69ab      	ldr	r3, [r5, #24]
 8000616:	b913      	cbnz	r3, 800061e <__swsetup_r+0x16>
 8000618:	4628      	mov	r0, r5
 800061a:	f000 f97d 	bl	8000918 <__sinit>
 800061e:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <__swsetup_r+0xd0>)
 8000620:	429c      	cmp	r4, r3
 8000622:	d10f      	bne.n	8000644 <__swsetup_r+0x3c>
 8000624:	686c      	ldr	r4, [r5, #4]
 8000626:	89a3      	ldrh	r3, [r4, #12]
 8000628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800062c:	0719      	lsls	r1, r3, #28
 800062e:	d42c      	bmi.n	800068a <__swsetup_r+0x82>
 8000630:	06dd      	lsls	r5, r3, #27
 8000632:	d411      	bmi.n	8000658 <__swsetup_r+0x50>
 8000634:	2309      	movs	r3, #9
 8000636:	6033      	str	r3, [r6, #0]
 8000638:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800063c:	81a3      	strh	r3, [r4, #12]
 800063e:	f04f 30ff 	mov.w	r0, #4294967295
 8000642:	e03e      	b.n	80006c2 <__swsetup_r+0xba>
 8000644:	4b25      	ldr	r3, [pc, #148]	; (80006dc <__swsetup_r+0xd4>)
 8000646:	429c      	cmp	r4, r3
 8000648:	d101      	bne.n	800064e <__swsetup_r+0x46>
 800064a:	68ac      	ldr	r4, [r5, #8]
 800064c:	e7eb      	b.n	8000626 <__swsetup_r+0x1e>
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <__swsetup_r+0xd8>)
 8000650:	429c      	cmp	r4, r3
 8000652:	bf08      	it	eq
 8000654:	68ec      	ldreq	r4, [r5, #12]
 8000656:	e7e6      	b.n	8000626 <__swsetup_r+0x1e>
 8000658:	0758      	lsls	r0, r3, #29
 800065a:	d512      	bpl.n	8000682 <__swsetup_r+0x7a>
 800065c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800065e:	b141      	cbz	r1, 8000672 <__swsetup_r+0x6a>
 8000660:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000664:	4299      	cmp	r1, r3
 8000666:	d002      	beq.n	800066e <__swsetup_r+0x66>
 8000668:	4630      	mov	r0, r6
 800066a:	f000 fa59 	bl	8000b20 <_free_r>
 800066e:	2300      	movs	r3, #0
 8000670:	6363      	str	r3, [r4, #52]	; 0x34
 8000672:	89a3      	ldrh	r3, [r4, #12]
 8000674:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000678:	81a3      	strh	r3, [r4, #12]
 800067a:	2300      	movs	r3, #0
 800067c:	6063      	str	r3, [r4, #4]
 800067e:	6923      	ldr	r3, [r4, #16]
 8000680:	6023      	str	r3, [r4, #0]
 8000682:	89a3      	ldrh	r3, [r4, #12]
 8000684:	f043 0308 	orr.w	r3, r3, #8
 8000688:	81a3      	strh	r3, [r4, #12]
 800068a:	6923      	ldr	r3, [r4, #16]
 800068c:	b94b      	cbnz	r3, 80006a2 <__swsetup_r+0x9a>
 800068e:	89a3      	ldrh	r3, [r4, #12]
 8000690:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000698:	d003      	beq.n	80006a2 <__swsetup_r+0x9a>
 800069a:	4621      	mov	r1, r4
 800069c:	4630      	mov	r0, r6
 800069e:	f000 f9ff 	bl	8000aa0 <__smakebuf_r>
 80006a2:	89a0      	ldrh	r0, [r4, #12]
 80006a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80006a8:	f010 0301 	ands.w	r3, r0, #1
 80006ac:	d00a      	beq.n	80006c4 <__swsetup_r+0xbc>
 80006ae:	2300      	movs	r3, #0
 80006b0:	60a3      	str	r3, [r4, #8]
 80006b2:	6963      	ldr	r3, [r4, #20]
 80006b4:	425b      	negs	r3, r3
 80006b6:	61a3      	str	r3, [r4, #24]
 80006b8:	6923      	ldr	r3, [r4, #16]
 80006ba:	b943      	cbnz	r3, 80006ce <__swsetup_r+0xc6>
 80006bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80006c0:	d1ba      	bne.n	8000638 <__swsetup_r+0x30>
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	0781      	lsls	r1, r0, #30
 80006c6:	bf58      	it	pl
 80006c8:	6963      	ldrpl	r3, [r4, #20]
 80006ca:	60a3      	str	r3, [r4, #8]
 80006cc:	e7f4      	b.n	80006b8 <__swsetup_r+0xb0>
 80006ce:	2000      	movs	r0, #0
 80006d0:	e7f7      	b.n	80006c2 <__swsetup_r+0xba>
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000
 80006d8:	08000ea0 	.word	0x08000ea0
 80006dc:	08000ec0 	.word	0x08000ec0
 80006e0:	08000e80 	.word	0x08000e80

080006e4 <__sflush_r>:
 80006e4:	898a      	ldrh	r2, [r1, #12]
 80006e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ea:	4605      	mov	r5, r0
 80006ec:	0710      	lsls	r0, r2, #28
 80006ee:	460c      	mov	r4, r1
 80006f0:	d458      	bmi.n	80007a4 <__sflush_r+0xc0>
 80006f2:	684b      	ldr	r3, [r1, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	dc05      	bgt.n	8000704 <__sflush_r+0x20>
 80006f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	dc02      	bgt.n	8000704 <__sflush_r+0x20>
 80006fe:	2000      	movs	r0, #0
 8000700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000706:	2e00      	cmp	r6, #0
 8000708:	d0f9      	beq.n	80006fe <__sflush_r+0x1a>
 800070a:	2300      	movs	r3, #0
 800070c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000710:	682f      	ldr	r7, [r5, #0]
 8000712:	602b      	str	r3, [r5, #0]
 8000714:	d032      	beq.n	800077c <__sflush_r+0x98>
 8000716:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000718:	89a3      	ldrh	r3, [r4, #12]
 800071a:	075a      	lsls	r2, r3, #29
 800071c:	d505      	bpl.n	800072a <__sflush_r+0x46>
 800071e:	6863      	ldr	r3, [r4, #4]
 8000720:	1ac0      	subs	r0, r0, r3
 8000722:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000724:	b10b      	cbz	r3, 800072a <__sflush_r+0x46>
 8000726:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000728:	1ac0      	subs	r0, r0, r3
 800072a:	2300      	movs	r3, #0
 800072c:	4602      	mov	r2, r0
 800072e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000730:	6a21      	ldr	r1, [r4, #32]
 8000732:	4628      	mov	r0, r5
 8000734:	47b0      	blx	r6
 8000736:	1c43      	adds	r3, r0, #1
 8000738:	89a3      	ldrh	r3, [r4, #12]
 800073a:	d106      	bne.n	800074a <__sflush_r+0x66>
 800073c:	6829      	ldr	r1, [r5, #0]
 800073e:	291d      	cmp	r1, #29
 8000740:	d82c      	bhi.n	800079c <__sflush_r+0xb8>
 8000742:	4a2a      	ldr	r2, [pc, #168]	; (80007ec <__sflush_r+0x108>)
 8000744:	40ca      	lsrs	r2, r1
 8000746:	07d6      	lsls	r6, r2, #31
 8000748:	d528      	bpl.n	800079c <__sflush_r+0xb8>
 800074a:	2200      	movs	r2, #0
 800074c:	6062      	str	r2, [r4, #4]
 800074e:	04d9      	lsls	r1, r3, #19
 8000750:	6922      	ldr	r2, [r4, #16]
 8000752:	6022      	str	r2, [r4, #0]
 8000754:	d504      	bpl.n	8000760 <__sflush_r+0x7c>
 8000756:	1c42      	adds	r2, r0, #1
 8000758:	d101      	bne.n	800075e <__sflush_r+0x7a>
 800075a:	682b      	ldr	r3, [r5, #0]
 800075c:	b903      	cbnz	r3, 8000760 <__sflush_r+0x7c>
 800075e:	6560      	str	r0, [r4, #84]	; 0x54
 8000760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000762:	602f      	str	r7, [r5, #0]
 8000764:	2900      	cmp	r1, #0
 8000766:	d0ca      	beq.n	80006fe <__sflush_r+0x1a>
 8000768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800076c:	4299      	cmp	r1, r3
 800076e:	d002      	beq.n	8000776 <__sflush_r+0x92>
 8000770:	4628      	mov	r0, r5
 8000772:	f000 f9d5 	bl	8000b20 <_free_r>
 8000776:	2000      	movs	r0, #0
 8000778:	6360      	str	r0, [r4, #52]	; 0x34
 800077a:	e7c1      	b.n	8000700 <__sflush_r+0x1c>
 800077c:	6a21      	ldr	r1, [r4, #32]
 800077e:	2301      	movs	r3, #1
 8000780:	4628      	mov	r0, r5
 8000782:	47b0      	blx	r6
 8000784:	1c41      	adds	r1, r0, #1
 8000786:	d1c7      	bne.n	8000718 <__sflush_r+0x34>
 8000788:	682b      	ldr	r3, [r5, #0]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d0c4      	beq.n	8000718 <__sflush_r+0x34>
 800078e:	2b1d      	cmp	r3, #29
 8000790:	d001      	beq.n	8000796 <__sflush_r+0xb2>
 8000792:	2b16      	cmp	r3, #22
 8000794:	d101      	bne.n	800079a <__sflush_r+0xb6>
 8000796:	602f      	str	r7, [r5, #0]
 8000798:	e7b1      	b.n	80006fe <__sflush_r+0x1a>
 800079a:	89a3      	ldrh	r3, [r4, #12]
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	81a3      	strh	r3, [r4, #12]
 80007a2:	e7ad      	b.n	8000700 <__sflush_r+0x1c>
 80007a4:	690f      	ldr	r7, [r1, #16]
 80007a6:	2f00      	cmp	r7, #0
 80007a8:	d0a9      	beq.n	80006fe <__sflush_r+0x1a>
 80007aa:	0793      	lsls	r3, r2, #30
 80007ac:	680e      	ldr	r6, [r1, #0]
 80007ae:	bf08      	it	eq
 80007b0:	694b      	ldreq	r3, [r1, #20]
 80007b2:	600f      	str	r7, [r1, #0]
 80007b4:	bf18      	it	ne
 80007b6:	2300      	movne	r3, #0
 80007b8:	eba6 0807 	sub.w	r8, r6, r7
 80007bc:	608b      	str	r3, [r1, #8]
 80007be:	f1b8 0f00 	cmp.w	r8, #0
 80007c2:	dd9c      	ble.n	80006fe <__sflush_r+0x1a>
 80007c4:	6a21      	ldr	r1, [r4, #32]
 80007c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80007c8:	4643      	mov	r3, r8
 80007ca:	463a      	mov	r2, r7
 80007cc:	4628      	mov	r0, r5
 80007ce:	47b0      	blx	r6
 80007d0:	2800      	cmp	r0, #0
 80007d2:	dc06      	bgt.n	80007e2 <__sflush_r+0xfe>
 80007d4:	89a3      	ldrh	r3, [r4, #12]
 80007d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007da:	81a3      	strh	r3, [r4, #12]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295
 80007e0:	e78e      	b.n	8000700 <__sflush_r+0x1c>
 80007e2:	4407      	add	r7, r0
 80007e4:	eba8 0800 	sub.w	r8, r8, r0
 80007e8:	e7e9      	b.n	80007be <__sflush_r+0xda>
 80007ea:	bf00      	nop
 80007ec:	20400001 	.word	0x20400001

080007f0 <_fflush_r>:
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	690b      	ldr	r3, [r1, #16]
 80007f4:	4605      	mov	r5, r0
 80007f6:	460c      	mov	r4, r1
 80007f8:	b913      	cbnz	r3, 8000800 <_fflush_r+0x10>
 80007fa:	2500      	movs	r5, #0
 80007fc:	4628      	mov	r0, r5
 80007fe:	bd38      	pop	{r3, r4, r5, pc}
 8000800:	b118      	cbz	r0, 800080a <_fflush_r+0x1a>
 8000802:	6983      	ldr	r3, [r0, #24]
 8000804:	b90b      	cbnz	r3, 800080a <_fflush_r+0x1a>
 8000806:	f000 f887 	bl	8000918 <__sinit>
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <_fflush_r+0x6c>)
 800080c:	429c      	cmp	r4, r3
 800080e:	d11b      	bne.n	8000848 <_fflush_r+0x58>
 8000810:	686c      	ldr	r4, [r5, #4]
 8000812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d0ef      	beq.n	80007fa <_fflush_r+0xa>
 800081a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800081c:	07d0      	lsls	r0, r2, #31
 800081e:	d404      	bmi.n	800082a <_fflush_r+0x3a>
 8000820:	0599      	lsls	r1, r3, #22
 8000822:	d402      	bmi.n	800082a <_fflush_r+0x3a>
 8000824:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000826:	f000 f915 	bl	8000a54 <__retarget_lock_acquire_recursive>
 800082a:	4628      	mov	r0, r5
 800082c:	4621      	mov	r1, r4
 800082e:	f7ff ff59 	bl	80006e4 <__sflush_r>
 8000832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000834:	07da      	lsls	r2, r3, #31
 8000836:	4605      	mov	r5, r0
 8000838:	d4e0      	bmi.n	80007fc <_fflush_r+0xc>
 800083a:	89a3      	ldrh	r3, [r4, #12]
 800083c:	059b      	lsls	r3, r3, #22
 800083e:	d4dd      	bmi.n	80007fc <_fflush_r+0xc>
 8000840:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000842:	f000 f908 	bl	8000a56 <__retarget_lock_release_recursive>
 8000846:	e7d9      	b.n	80007fc <_fflush_r+0xc>
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <_fflush_r+0x70>)
 800084a:	429c      	cmp	r4, r3
 800084c:	d101      	bne.n	8000852 <_fflush_r+0x62>
 800084e:	68ac      	ldr	r4, [r5, #8]
 8000850:	e7df      	b.n	8000812 <_fflush_r+0x22>
 8000852:	4b04      	ldr	r3, [pc, #16]	; (8000864 <_fflush_r+0x74>)
 8000854:	429c      	cmp	r4, r3
 8000856:	bf08      	it	eq
 8000858:	68ec      	ldreq	r4, [r5, #12]
 800085a:	e7da      	b.n	8000812 <_fflush_r+0x22>
 800085c:	08000ea0 	.word	0x08000ea0
 8000860:	08000ec0 	.word	0x08000ec0
 8000864:	08000e80 	.word	0x08000e80

08000868 <std>:
 8000868:	2300      	movs	r3, #0
 800086a:	b510      	push	{r4, lr}
 800086c:	4604      	mov	r4, r0
 800086e:	e9c0 3300 	strd	r3, r3, [r0]
 8000872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000876:	6083      	str	r3, [r0, #8]
 8000878:	8181      	strh	r1, [r0, #12]
 800087a:	6643      	str	r3, [r0, #100]	; 0x64
 800087c:	81c2      	strh	r2, [r0, #14]
 800087e:	6183      	str	r3, [r0, #24]
 8000880:	4619      	mov	r1, r3
 8000882:	2208      	movs	r2, #8
 8000884:	305c      	adds	r0, #92	; 0x5c
 8000886:	f7ff fdef 	bl	8000468 <memset>
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <std+0x38>)
 800088c:	6263      	str	r3, [r4, #36]	; 0x24
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <std+0x3c>)
 8000890:	62a3      	str	r3, [r4, #40]	; 0x28
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <std+0x40>)
 8000894:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <std+0x44>)
 8000898:	6224      	str	r4, [r4, #32]
 800089a:	6323      	str	r3, [r4, #48]	; 0x30
 800089c:	bd10      	pop	{r4, pc}
 800089e:	bf00      	nop
 80008a0:	08000c95 	.word	0x08000c95
 80008a4:	08000cb7 	.word	0x08000cb7
 80008a8:	08000cef 	.word	0x08000cef
 80008ac:	08000d13 	.word	0x08000d13

080008b0 <_cleanup_r>:
 80008b0:	4901      	ldr	r1, [pc, #4]	; (80008b8 <_cleanup_r+0x8>)
 80008b2:	f000 b8af 	b.w	8000a14 <_fwalk_reent>
 80008b6:	bf00      	nop
 80008b8:	080007f1 	.word	0x080007f1

080008bc <__sfmoreglue>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	1e4a      	subs	r2, r1, #1
 80008c0:	2568      	movs	r5, #104	; 0x68
 80008c2:	4355      	muls	r5, r2
 80008c4:	460e      	mov	r6, r1
 80008c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80008ca:	f000 f979 	bl	8000bc0 <_malloc_r>
 80008ce:	4604      	mov	r4, r0
 80008d0:	b140      	cbz	r0, 80008e4 <__sfmoreglue+0x28>
 80008d2:	2100      	movs	r1, #0
 80008d4:	e9c0 1600 	strd	r1, r6, [r0]
 80008d8:	300c      	adds	r0, #12
 80008da:	60a0      	str	r0, [r4, #8]
 80008dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80008e0:	f7ff fdc2 	bl	8000468 <memset>
 80008e4:	4620      	mov	r0, r4
 80008e6:	bd70      	pop	{r4, r5, r6, pc}

080008e8 <__sfp_lock_acquire>:
 80008e8:	4801      	ldr	r0, [pc, #4]	; (80008f0 <__sfp_lock_acquire+0x8>)
 80008ea:	f000 b8b3 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 80008ee:	bf00      	nop
 80008f0:	20000094 	.word	0x20000094

080008f4 <__sfp_lock_release>:
 80008f4:	4801      	ldr	r0, [pc, #4]	; (80008fc <__sfp_lock_release+0x8>)
 80008f6:	f000 b8ae 	b.w	8000a56 <__retarget_lock_release_recursive>
 80008fa:	bf00      	nop
 80008fc:	20000094 	.word	0x20000094

08000900 <__sinit_lock_acquire>:
 8000900:	4801      	ldr	r0, [pc, #4]	; (8000908 <__sinit_lock_acquire+0x8>)
 8000902:	f000 b8a7 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 8000906:	bf00      	nop
 8000908:	2000008f 	.word	0x2000008f

0800090c <__sinit_lock_release>:
 800090c:	4801      	ldr	r0, [pc, #4]	; (8000914 <__sinit_lock_release+0x8>)
 800090e:	f000 b8a2 	b.w	8000a56 <__retarget_lock_release_recursive>
 8000912:	bf00      	nop
 8000914:	2000008f 	.word	0x2000008f

08000918 <__sinit>:
 8000918:	b510      	push	{r4, lr}
 800091a:	4604      	mov	r4, r0
 800091c:	f7ff fff0 	bl	8000900 <__sinit_lock_acquire>
 8000920:	69a3      	ldr	r3, [r4, #24]
 8000922:	b11b      	cbz	r3, 800092c <__sinit+0x14>
 8000924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000928:	f7ff bff0 	b.w	800090c <__sinit_lock_release>
 800092c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000930:	6523      	str	r3, [r4, #80]	; 0x50
 8000932:	4b13      	ldr	r3, [pc, #76]	; (8000980 <__sinit+0x68>)
 8000934:	4a13      	ldr	r2, [pc, #76]	; (8000984 <__sinit+0x6c>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	62a2      	str	r2, [r4, #40]	; 0x28
 800093a:	42a3      	cmp	r3, r4
 800093c:	bf04      	itt	eq
 800093e:	2301      	moveq	r3, #1
 8000940:	61a3      	streq	r3, [r4, #24]
 8000942:	4620      	mov	r0, r4
 8000944:	f000 f820 	bl	8000988 <__sfp>
 8000948:	6060      	str	r0, [r4, #4]
 800094a:	4620      	mov	r0, r4
 800094c:	f000 f81c 	bl	8000988 <__sfp>
 8000950:	60a0      	str	r0, [r4, #8]
 8000952:	4620      	mov	r0, r4
 8000954:	f000 f818 	bl	8000988 <__sfp>
 8000958:	2200      	movs	r2, #0
 800095a:	60e0      	str	r0, [r4, #12]
 800095c:	2104      	movs	r1, #4
 800095e:	6860      	ldr	r0, [r4, #4]
 8000960:	f7ff ff82 	bl	8000868 <std>
 8000964:	68a0      	ldr	r0, [r4, #8]
 8000966:	2201      	movs	r2, #1
 8000968:	2109      	movs	r1, #9
 800096a:	f7ff ff7d 	bl	8000868 <std>
 800096e:	68e0      	ldr	r0, [r4, #12]
 8000970:	2202      	movs	r2, #2
 8000972:	2112      	movs	r1, #18
 8000974:	f7ff ff78 	bl	8000868 <std>
 8000978:	2301      	movs	r3, #1
 800097a:	61a3      	str	r3, [r4, #24]
 800097c:	e7d2      	b.n	8000924 <__sinit+0xc>
 800097e:	bf00      	nop
 8000980:	08000e7c 	.word	0x08000e7c
 8000984:	080008b1 	.word	0x080008b1

08000988 <__sfp>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	4607      	mov	r7, r0
 800098c:	f7ff ffac 	bl	80008e8 <__sfp_lock_acquire>
 8000990:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <__sfp+0x84>)
 8000992:	681e      	ldr	r6, [r3, #0]
 8000994:	69b3      	ldr	r3, [r6, #24]
 8000996:	b913      	cbnz	r3, 800099e <__sfp+0x16>
 8000998:	4630      	mov	r0, r6
 800099a:	f7ff ffbd 	bl	8000918 <__sinit>
 800099e:	3648      	adds	r6, #72	; 0x48
 80009a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	d503      	bpl.n	80009b0 <__sfp+0x28>
 80009a8:	6833      	ldr	r3, [r6, #0]
 80009aa:	b30b      	cbz	r3, 80009f0 <__sfp+0x68>
 80009ac:	6836      	ldr	r6, [r6, #0]
 80009ae:	e7f7      	b.n	80009a0 <__sfp+0x18>
 80009b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80009b4:	b9d5      	cbnz	r5, 80009ec <__sfp+0x64>
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <__sfp+0x88>)
 80009b8:	60e3      	str	r3, [r4, #12]
 80009ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80009be:	6665      	str	r5, [r4, #100]	; 0x64
 80009c0:	f000 f847 	bl	8000a52 <__retarget_lock_init_recursive>
 80009c4:	f7ff ff96 	bl	80008f4 <__sfp_lock_release>
 80009c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80009cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80009d0:	6025      	str	r5, [r4, #0]
 80009d2:	61a5      	str	r5, [r4, #24]
 80009d4:	2208      	movs	r2, #8
 80009d6:	4629      	mov	r1, r5
 80009d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80009dc:	f7ff fd44 	bl	8000468 <memset>
 80009e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80009e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009e8:	4620      	mov	r0, r4
 80009ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009ec:	3468      	adds	r4, #104	; 0x68
 80009ee:	e7d9      	b.n	80009a4 <__sfp+0x1c>
 80009f0:	2104      	movs	r1, #4
 80009f2:	4638      	mov	r0, r7
 80009f4:	f7ff ff62 	bl	80008bc <__sfmoreglue>
 80009f8:	4604      	mov	r4, r0
 80009fa:	6030      	str	r0, [r6, #0]
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d1d5      	bne.n	80009ac <__sfp+0x24>
 8000a00:	f7ff ff78 	bl	80008f4 <__sfp_lock_release>
 8000a04:	230c      	movs	r3, #12
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	e7ee      	b.n	80009e8 <__sfp+0x60>
 8000a0a:	bf00      	nop
 8000a0c:	08000e7c 	.word	0x08000e7c
 8000a10:	ffff0001 	.word	0xffff0001

08000a14 <_fwalk_reent>:
 8000a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a18:	4606      	mov	r6, r0
 8000a1a:	4688      	mov	r8, r1
 8000a1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000a20:	2700      	movs	r7, #0
 8000a22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a26:	f1b9 0901 	subs.w	r9, r9, #1
 8000a2a:	d505      	bpl.n	8000a38 <_fwalk_reent+0x24>
 8000a2c:	6824      	ldr	r4, [r4, #0]
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d1f7      	bne.n	8000a22 <_fwalk_reent+0xe>
 8000a32:	4638      	mov	r0, r7
 8000a34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a38:	89ab      	ldrh	r3, [r5, #12]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d907      	bls.n	8000a4e <_fwalk_reent+0x3a>
 8000a3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a42:	3301      	adds	r3, #1
 8000a44:	d003      	beq.n	8000a4e <_fwalk_reent+0x3a>
 8000a46:	4629      	mov	r1, r5
 8000a48:	4630      	mov	r0, r6
 8000a4a:	47c0      	blx	r8
 8000a4c:	4307      	orrs	r7, r0
 8000a4e:	3568      	adds	r5, #104	; 0x68
 8000a50:	e7e9      	b.n	8000a26 <_fwalk_reent+0x12>

08000a52 <__retarget_lock_init_recursive>:
 8000a52:	4770      	bx	lr

08000a54 <__retarget_lock_acquire_recursive>:
 8000a54:	4770      	bx	lr

08000a56 <__retarget_lock_release_recursive>:
 8000a56:	4770      	bx	lr

08000a58 <__swhatbuf_r>:
 8000a58:	b570      	push	{r4, r5, r6, lr}
 8000a5a:	460e      	mov	r6, r1
 8000a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a60:	2900      	cmp	r1, #0
 8000a62:	b096      	sub	sp, #88	; 0x58
 8000a64:	4614      	mov	r4, r2
 8000a66:	461d      	mov	r5, r3
 8000a68:	da07      	bge.n	8000a7a <__swhatbuf_r+0x22>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	602b      	str	r3, [r5, #0]
 8000a6e:	89b3      	ldrh	r3, [r6, #12]
 8000a70:	061a      	lsls	r2, r3, #24
 8000a72:	d410      	bmi.n	8000a96 <__swhatbuf_r+0x3e>
 8000a74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a78:	e00e      	b.n	8000a98 <__swhatbuf_r+0x40>
 8000a7a:	466a      	mov	r2, sp
 8000a7c:	f000 f970 	bl	8000d60 <_fstat_r>
 8000a80:	2800      	cmp	r0, #0
 8000a82:	dbf2      	blt.n	8000a6a <__swhatbuf_r+0x12>
 8000a84:	9a01      	ldr	r2, [sp, #4]
 8000a86:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000a8a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000a8e:	425a      	negs	r2, r3
 8000a90:	415a      	adcs	r2, r3
 8000a92:	602a      	str	r2, [r5, #0]
 8000a94:	e7ee      	b.n	8000a74 <__swhatbuf_r+0x1c>
 8000a96:	2340      	movs	r3, #64	; 0x40
 8000a98:	2000      	movs	r0, #0
 8000a9a:	6023      	str	r3, [r4, #0]
 8000a9c:	b016      	add	sp, #88	; 0x58
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}

08000aa0 <__smakebuf_r>:
 8000aa0:	898b      	ldrh	r3, [r1, #12]
 8000aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000aa4:	079d      	lsls	r5, r3, #30
 8000aa6:	4606      	mov	r6, r0
 8000aa8:	460c      	mov	r4, r1
 8000aaa:	d507      	bpl.n	8000abc <__smakebuf_r+0x1c>
 8000aac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000ab0:	6023      	str	r3, [r4, #0]
 8000ab2:	6123      	str	r3, [r4, #16]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	6163      	str	r3, [r4, #20]
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	ab01      	add	r3, sp, #4
 8000abe:	466a      	mov	r2, sp
 8000ac0:	f7ff ffca 	bl	8000a58 <__swhatbuf_r>
 8000ac4:	9900      	ldr	r1, [sp, #0]
 8000ac6:	4605      	mov	r5, r0
 8000ac8:	4630      	mov	r0, r6
 8000aca:	f000 f879 	bl	8000bc0 <_malloc_r>
 8000ace:	b948      	cbnz	r0, 8000ae4 <__smakebuf_r+0x44>
 8000ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ad4:	059a      	lsls	r2, r3, #22
 8000ad6:	d4ef      	bmi.n	8000ab8 <__smakebuf_r+0x18>
 8000ad8:	f023 0303 	bic.w	r3, r3, #3
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	81a3      	strh	r3, [r4, #12]
 8000ae2:	e7e3      	b.n	8000aac <__smakebuf_r+0xc>
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <__smakebuf_r+0x7c>)
 8000ae6:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ae8:	89a3      	ldrh	r3, [r4, #12]
 8000aea:	6020      	str	r0, [r4, #0]
 8000aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af0:	81a3      	strh	r3, [r4, #12]
 8000af2:	9b00      	ldr	r3, [sp, #0]
 8000af4:	6163      	str	r3, [r4, #20]
 8000af6:	9b01      	ldr	r3, [sp, #4]
 8000af8:	6120      	str	r0, [r4, #16]
 8000afa:	b15b      	cbz	r3, 8000b14 <__smakebuf_r+0x74>
 8000afc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000b00:	4630      	mov	r0, r6
 8000b02:	f000 f93f 	bl	8000d84 <_isatty_r>
 8000b06:	b128      	cbz	r0, 8000b14 <__smakebuf_r+0x74>
 8000b08:	89a3      	ldrh	r3, [r4, #12]
 8000b0a:	f023 0303 	bic.w	r3, r3, #3
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	81a3      	strh	r3, [r4, #12]
 8000b14:	89a0      	ldrh	r0, [r4, #12]
 8000b16:	4305      	orrs	r5, r0
 8000b18:	81a5      	strh	r5, [r4, #12]
 8000b1a:	e7cd      	b.n	8000ab8 <__smakebuf_r+0x18>
 8000b1c:	080008b1 	.word	0x080008b1

08000b20 <_free_r>:
 8000b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d048      	beq.n	8000bb8 <_free_r+0x98>
 8000b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b2a:	9001      	str	r0, [sp, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8000b32:	bfb8      	it	lt
 8000b34:	18e4      	addlt	r4, r4, r3
 8000b36:	f000 f947 	bl	8000dc8 <__malloc_lock>
 8000b3a:	4a20      	ldr	r2, [pc, #128]	; (8000bbc <_free_r+0x9c>)
 8000b3c:	9801      	ldr	r0, [sp, #4]
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	4615      	mov	r5, r2
 8000b42:	b933      	cbnz	r3, 8000b52 <_free_r+0x32>
 8000b44:	6063      	str	r3, [r4, #4]
 8000b46:	6014      	str	r4, [r2, #0]
 8000b48:	b003      	add	sp, #12
 8000b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b4e:	f000 b941 	b.w	8000dd4 <__malloc_unlock>
 8000b52:	42a3      	cmp	r3, r4
 8000b54:	d90b      	bls.n	8000b6e <_free_r+0x4e>
 8000b56:	6821      	ldr	r1, [r4, #0]
 8000b58:	1862      	adds	r2, r4, r1
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	bf04      	itt	eq
 8000b5e:	681a      	ldreq	r2, [r3, #0]
 8000b60:	685b      	ldreq	r3, [r3, #4]
 8000b62:	6063      	str	r3, [r4, #4]
 8000b64:	bf04      	itt	eq
 8000b66:	1852      	addeq	r2, r2, r1
 8000b68:	6022      	streq	r2, [r4, #0]
 8000b6a:	602c      	str	r4, [r5, #0]
 8000b6c:	e7ec      	b.n	8000b48 <_free_r+0x28>
 8000b6e:	461a      	mov	r2, r3
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	b10b      	cbz	r3, 8000b78 <_free_r+0x58>
 8000b74:	42a3      	cmp	r3, r4
 8000b76:	d9fa      	bls.n	8000b6e <_free_r+0x4e>
 8000b78:	6811      	ldr	r1, [r2, #0]
 8000b7a:	1855      	adds	r5, r2, r1
 8000b7c:	42a5      	cmp	r5, r4
 8000b7e:	d10b      	bne.n	8000b98 <_free_r+0x78>
 8000b80:	6824      	ldr	r4, [r4, #0]
 8000b82:	4421      	add	r1, r4
 8000b84:	1854      	adds	r4, r2, r1
 8000b86:	42a3      	cmp	r3, r4
 8000b88:	6011      	str	r1, [r2, #0]
 8000b8a:	d1dd      	bne.n	8000b48 <_free_r+0x28>
 8000b8c:	681c      	ldr	r4, [r3, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	6053      	str	r3, [r2, #4]
 8000b92:	4421      	add	r1, r4
 8000b94:	6011      	str	r1, [r2, #0]
 8000b96:	e7d7      	b.n	8000b48 <_free_r+0x28>
 8000b98:	d902      	bls.n	8000ba0 <_free_r+0x80>
 8000b9a:	230c      	movs	r3, #12
 8000b9c:	6003      	str	r3, [r0, #0]
 8000b9e:	e7d3      	b.n	8000b48 <_free_r+0x28>
 8000ba0:	6825      	ldr	r5, [r4, #0]
 8000ba2:	1961      	adds	r1, r4, r5
 8000ba4:	428b      	cmp	r3, r1
 8000ba6:	bf04      	itt	eq
 8000ba8:	6819      	ldreq	r1, [r3, #0]
 8000baa:	685b      	ldreq	r3, [r3, #4]
 8000bac:	6063      	str	r3, [r4, #4]
 8000bae:	bf04      	itt	eq
 8000bb0:	1949      	addeq	r1, r1, r5
 8000bb2:	6021      	streq	r1, [r4, #0]
 8000bb4:	6054      	str	r4, [r2, #4]
 8000bb6:	e7c7      	b.n	8000b48 <_free_r+0x28>
 8000bb8:	b003      	add	sp, #12
 8000bba:	bd30      	pop	{r4, r5, pc}
 8000bbc:	20000084 	.word	0x20000084

08000bc0 <_malloc_r>:
 8000bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc2:	1ccd      	adds	r5, r1, #3
 8000bc4:	f025 0503 	bic.w	r5, r5, #3
 8000bc8:	3508      	adds	r5, #8
 8000bca:	2d0c      	cmp	r5, #12
 8000bcc:	bf38      	it	cc
 8000bce:	250c      	movcc	r5, #12
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	4606      	mov	r6, r0
 8000bd4:	db01      	blt.n	8000bda <_malloc_r+0x1a>
 8000bd6:	42a9      	cmp	r1, r5
 8000bd8:	d903      	bls.n	8000be2 <_malloc_r+0x22>
 8000bda:	230c      	movs	r3, #12
 8000bdc:	6033      	str	r3, [r6, #0]
 8000bde:	2000      	movs	r0, #0
 8000be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000be2:	f000 f8f1 	bl	8000dc8 <__malloc_lock>
 8000be6:	4921      	ldr	r1, [pc, #132]	; (8000c6c <_malloc_r+0xac>)
 8000be8:	680a      	ldr	r2, [r1, #0]
 8000bea:	4614      	mov	r4, r2
 8000bec:	b99c      	cbnz	r4, 8000c16 <_malloc_r+0x56>
 8000bee:	4f20      	ldr	r7, [pc, #128]	; (8000c70 <_malloc_r+0xb0>)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b923      	cbnz	r3, 8000bfe <_malloc_r+0x3e>
 8000bf4:	4621      	mov	r1, r4
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	f000 f83c 	bl	8000c74 <_sbrk_r>
 8000bfc:	6038      	str	r0, [r7, #0]
 8000bfe:	4629      	mov	r1, r5
 8000c00:	4630      	mov	r0, r6
 8000c02:	f000 f837 	bl	8000c74 <_sbrk_r>
 8000c06:	1c43      	adds	r3, r0, #1
 8000c08:	d123      	bne.n	8000c52 <_malloc_r+0x92>
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	6033      	str	r3, [r6, #0]
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f000 f8e0 	bl	8000dd4 <__malloc_unlock>
 8000c14:	e7e3      	b.n	8000bde <_malloc_r+0x1e>
 8000c16:	6823      	ldr	r3, [r4, #0]
 8000c18:	1b5b      	subs	r3, r3, r5
 8000c1a:	d417      	bmi.n	8000c4c <_malloc_r+0x8c>
 8000c1c:	2b0b      	cmp	r3, #11
 8000c1e:	d903      	bls.n	8000c28 <_malloc_r+0x68>
 8000c20:	6023      	str	r3, [r4, #0]
 8000c22:	441c      	add	r4, r3
 8000c24:	6025      	str	r5, [r4, #0]
 8000c26:	e004      	b.n	8000c32 <_malloc_r+0x72>
 8000c28:	6863      	ldr	r3, [r4, #4]
 8000c2a:	42a2      	cmp	r2, r4
 8000c2c:	bf0c      	ite	eq
 8000c2e:	600b      	streq	r3, [r1, #0]
 8000c30:	6053      	strne	r3, [r2, #4]
 8000c32:	4630      	mov	r0, r6
 8000c34:	f000 f8ce 	bl	8000dd4 <__malloc_unlock>
 8000c38:	f104 000b 	add.w	r0, r4, #11
 8000c3c:	1d23      	adds	r3, r4, #4
 8000c3e:	f020 0007 	bic.w	r0, r0, #7
 8000c42:	1ac2      	subs	r2, r0, r3
 8000c44:	d0cc      	beq.n	8000be0 <_malloc_r+0x20>
 8000c46:	1a1b      	subs	r3, r3, r0
 8000c48:	50a3      	str	r3, [r4, r2]
 8000c4a:	e7c9      	b.n	8000be0 <_malloc_r+0x20>
 8000c4c:	4622      	mov	r2, r4
 8000c4e:	6864      	ldr	r4, [r4, #4]
 8000c50:	e7cc      	b.n	8000bec <_malloc_r+0x2c>
 8000c52:	1cc4      	adds	r4, r0, #3
 8000c54:	f024 0403 	bic.w	r4, r4, #3
 8000c58:	42a0      	cmp	r0, r4
 8000c5a:	d0e3      	beq.n	8000c24 <_malloc_r+0x64>
 8000c5c:	1a21      	subs	r1, r4, r0
 8000c5e:	4630      	mov	r0, r6
 8000c60:	f000 f808 	bl	8000c74 <_sbrk_r>
 8000c64:	3001      	adds	r0, #1
 8000c66:	d1dd      	bne.n	8000c24 <_malloc_r+0x64>
 8000c68:	e7cf      	b.n	8000c0a <_malloc_r+0x4a>
 8000c6a:	bf00      	nop
 8000c6c:	20000084 	.word	0x20000084
 8000c70:	20000088 	.word	0x20000088

08000c74 <_sbrk_r>:
 8000c74:	b538      	push	{r3, r4, r5, lr}
 8000c76:	4d06      	ldr	r5, [pc, #24]	; (8000c90 <_sbrk_r+0x1c>)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	4608      	mov	r0, r1
 8000c7e:	602b      	str	r3, [r5, #0]
 8000c80:	f7ff fb68 	bl	8000354 <_sbrk>
 8000c84:	1c43      	adds	r3, r0, #1
 8000c86:	d102      	bne.n	8000c8e <_sbrk_r+0x1a>
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	b103      	cbz	r3, 8000c8e <_sbrk_r+0x1a>
 8000c8c:	6023      	str	r3, [r4, #0]
 8000c8e:	bd38      	pop	{r3, r4, r5, pc}
 8000c90:	20000098 	.word	0x20000098

08000c94 <__sread>:
 8000c94:	b510      	push	{r4, lr}
 8000c96:	460c      	mov	r4, r1
 8000c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c9c:	f000 f8a0 	bl	8000de0 <_read_r>
 8000ca0:	2800      	cmp	r0, #0
 8000ca2:	bfab      	itete	ge
 8000ca4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000ca6:	89a3      	ldrhlt	r3, [r4, #12]
 8000ca8:	181b      	addge	r3, r3, r0
 8000caa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000cae:	bfac      	ite	ge
 8000cb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8000cb2:	81a3      	strhlt	r3, [r4, #12]
 8000cb4:	bd10      	pop	{r4, pc}

08000cb6 <__swrite>:
 8000cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cba:	461f      	mov	r7, r3
 8000cbc:	898b      	ldrh	r3, [r1, #12]
 8000cbe:	05db      	lsls	r3, r3, #23
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	460c      	mov	r4, r1
 8000cc4:	4616      	mov	r6, r2
 8000cc6:	d505      	bpl.n	8000cd4 <__swrite+0x1e>
 8000cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ccc:	2302      	movs	r3, #2
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f000 f868 	bl	8000da4 <_lseek_r>
 8000cd4:	89a3      	ldrh	r3, [r4, #12]
 8000cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000cde:	81a3      	strh	r3, [r4, #12]
 8000ce0:	4632      	mov	r2, r6
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4628      	mov	r0, r5
 8000ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000cea:	f000 b817 	b.w	8000d1c <_write_r>

08000cee <__sseek>:
 8000cee:	b510      	push	{r4, lr}
 8000cf0:	460c      	mov	r4, r1
 8000cf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cf6:	f000 f855 	bl	8000da4 <_lseek_r>
 8000cfa:	1c43      	adds	r3, r0, #1
 8000cfc:	89a3      	ldrh	r3, [r4, #12]
 8000cfe:	bf15      	itete	ne
 8000d00:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d0a:	81a3      	strheq	r3, [r4, #12]
 8000d0c:	bf18      	it	ne
 8000d0e:	81a3      	strhne	r3, [r4, #12]
 8000d10:	bd10      	pop	{r4, pc}

08000d12 <__sclose>:
 8000d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d16:	f000 b813 	b.w	8000d40 <_close_r>
	...

08000d1c <_write_r>:
 8000d1c:	b538      	push	{r3, r4, r5, lr}
 8000d1e:	4d07      	ldr	r5, [pc, #28]	; (8000d3c <_write_r+0x20>)
 8000d20:	4604      	mov	r4, r0
 8000d22:	4608      	mov	r0, r1
 8000d24:	4611      	mov	r1, r2
 8000d26:	2200      	movs	r2, #0
 8000d28:	602a      	str	r2, [r5, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	f7ff fac1 	bl	80002b2 <_write>
 8000d30:	1c43      	adds	r3, r0, #1
 8000d32:	d102      	bne.n	8000d3a <_write_r+0x1e>
 8000d34:	682b      	ldr	r3, [r5, #0]
 8000d36:	b103      	cbz	r3, 8000d3a <_write_r+0x1e>
 8000d38:	6023      	str	r3, [r4, #0]
 8000d3a:	bd38      	pop	{r3, r4, r5, pc}
 8000d3c:	20000098 	.word	0x20000098

08000d40 <_close_r>:
 8000d40:	b538      	push	{r3, r4, r5, lr}
 8000d42:	4d06      	ldr	r5, [pc, #24]	; (8000d5c <_close_r+0x1c>)
 8000d44:	2300      	movs	r3, #0
 8000d46:	4604      	mov	r4, r0
 8000d48:	4608      	mov	r0, r1
 8000d4a:	602b      	str	r3, [r5, #0]
 8000d4c:	f7ff facd 	bl	80002ea <_close>
 8000d50:	1c43      	adds	r3, r0, #1
 8000d52:	d102      	bne.n	8000d5a <_close_r+0x1a>
 8000d54:	682b      	ldr	r3, [r5, #0]
 8000d56:	b103      	cbz	r3, 8000d5a <_close_r+0x1a>
 8000d58:	6023      	str	r3, [r4, #0]
 8000d5a:	bd38      	pop	{r3, r4, r5, pc}
 8000d5c:	20000098 	.word	0x20000098

08000d60 <_fstat_r>:
 8000d60:	b538      	push	{r3, r4, r5, lr}
 8000d62:	4d07      	ldr	r5, [pc, #28]	; (8000d80 <_fstat_r+0x20>)
 8000d64:	2300      	movs	r3, #0
 8000d66:	4604      	mov	r4, r0
 8000d68:	4608      	mov	r0, r1
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	602b      	str	r3, [r5, #0]
 8000d6e:	f7ff fac8 	bl	8000302 <_fstat>
 8000d72:	1c43      	adds	r3, r0, #1
 8000d74:	d102      	bne.n	8000d7c <_fstat_r+0x1c>
 8000d76:	682b      	ldr	r3, [r5, #0]
 8000d78:	b103      	cbz	r3, 8000d7c <_fstat_r+0x1c>
 8000d7a:	6023      	str	r3, [r4, #0]
 8000d7c:	bd38      	pop	{r3, r4, r5, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000098 	.word	0x20000098

08000d84 <_isatty_r>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4d06      	ldr	r5, [pc, #24]	; (8000da0 <_isatty_r+0x1c>)
 8000d88:	2300      	movs	r3, #0
 8000d8a:	4604      	mov	r4, r0
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	602b      	str	r3, [r5, #0]
 8000d90:	f7ff fac7 	bl	8000322 <_isatty>
 8000d94:	1c43      	adds	r3, r0, #1
 8000d96:	d102      	bne.n	8000d9e <_isatty_r+0x1a>
 8000d98:	682b      	ldr	r3, [r5, #0]
 8000d9a:	b103      	cbz	r3, 8000d9e <_isatty_r+0x1a>
 8000d9c:	6023      	str	r3, [r4, #0]
 8000d9e:	bd38      	pop	{r3, r4, r5, pc}
 8000da0:	20000098 	.word	0x20000098

08000da4 <_lseek_r>:
 8000da4:	b538      	push	{r3, r4, r5, lr}
 8000da6:	4d07      	ldr	r5, [pc, #28]	; (8000dc4 <_lseek_r+0x20>)
 8000da8:	4604      	mov	r4, r0
 8000daa:	4608      	mov	r0, r1
 8000dac:	4611      	mov	r1, r2
 8000dae:	2200      	movs	r2, #0
 8000db0:	602a      	str	r2, [r5, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	f7ff fac0 	bl	8000338 <_lseek>
 8000db8:	1c43      	adds	r3, r0, #1
 8000dba:	d102      	bne.n	8000dc2 <_lseek_r+0x1e>
 8000dbc:	682b      	ldr	r3, [r5, #0]
 8000dbe:	b103      	cbz	r3, 8000dc2 <_lseek_r+0x1e>
 8000dc0:	6023      	str	r3, [r4, #0]
 8000dc2:	bd38      	pop	{r3, r4, r5, pc}
 8000dc4:	20000098 	.word	0x20000098

08000dc8 <__malloc_lock>:
 8000dc8:	4801      	ldr	r0, [pc, #4]	; (8000dd0 <__malloc_lock+0x8>)
 8000dca:	f7ff be43 	b.w	8000a54 <__retarget_lock_acquire_recursive>
 8000dce:	bf00      	nop
 8000dd0:	20000090 	.word	0x20000090

08000dd4 <__malloc_unlock>:
 8000dd4:	4801      	ldr	r0, [pc, #4]	; (8000ddc <__malloc_unlock+0x8>)
 8000dd6:	f7ff be3e 	b.w	8000a56 <__retarget_lock_release_recursive>
 8000dda:	bf00      	nop
 8000ddc:	20000090 	.word	0x20000090

08000de0 <_read_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d07      	ldr	r5, [pc, #28]	; (8000e00 <_read_r+0x20>)
 8000de4:	4604      	mov	r4, r0
 8000de6:	4608      	mov	r0, r1
 8000de8:	4611      	mov	r1, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	602a      	str	r2, [r5, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f7ff fa42 	bl	8000278 <_read>
 8000df4:	1c43      	adds	r3, r0, #1
 8000df6:	d102      	bne.n	8000dfe <_read_r+0x1e>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	b103      	cbz	r3, 8000dfe <_read_r+0x1e>
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	20000098 	.word	0x20000098

08000e04 <_init>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	bf00      	nop
 8000e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0a:	bc08      	pop	{r3}
 8000e0c:	469e      	mov	lr, r3
 8000e0e:	4770      	bx	lr

08000e10 <_fini>:
 8000e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e12:	bf00      	nop
 8000e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e16:	bc08      	pop	{r3}
 8000e18:	469e      	mov	lr, r3
 8000e1a:	4770      	bx	lr
